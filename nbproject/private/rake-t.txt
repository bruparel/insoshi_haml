(in /home/bruparel/work/insoshi_haml)
rake annotate_models                    # Add schema information (as comments) to model files
rake db:abort_if_pending_migrations     # Raises an error if there are pending migrations
rake db:charset                         # Retrieves the charset for the current environment's database
rake db:collation                       # Retrieves the collation for the current environment's database
rake db:conversation_bootstrap          # Recycle the database by dropping, recreating, and migrating
rake db:create                          # Create the database defined in config/database.yml for the current RAILS_ENV
rake db:create:all                      # Create all the local databases defined in config/database.yml
rake db:demo_data:load                  # Load demo data
rake db:demo_data:reload                # Reload demo data
rake db:demo_data:remove                # Remove demo data
rake db:drop                            # Drops the database for the current RAILS_ENV
rake db:drop:all                        # Drops all the local databases defined in config/database.yml
rake db:fixtures:identify               # Search for a fixture given a LABEL or ID.
rake db:fixtures:load                   # Load fixtures into the current environment's database.
rake db:migrate                         # Migrate the database through scripts in db/migrate.
rake db:migrate:both                    # Migrate and prepare test database
rake db:migrate:down                    # Runs the "down" for a given migration VERSION.
rake db:migrate:redo                    # Rollbacks the database one migration and re migrate up.
rake db:migrate:reset                   # Resets your database using your migrations for the current environment
rake db:migrate:up                      # Runs the "up" for a given migration VERSION.
rake db:recycle                         # Recycle the databases by dropping, recreating, and migrating
rake db:reset                           # Drops and recreates the database from db/schema.rb for the current environment.
rake db:rollback                        # Rolls the schema back to the previous version.
rake db:sample_data:load                # Load sample data
rake db:sample_data:reload              # Reload sample data
rake db:sample_data:remove              # Remove sample data
rake db:schema:dump                     # Create a db/schema.rb file that can be portably used against any DB supported by AR
rake db:schema:load                     # Load a schema.rb file into the database
rake db:sessions:clear                  # Clear the sessions table
rake db:sessions:create                 # Creates a sessions migration for use with CGI::Session::ActiveRecordStore
rake db:structure:dump                  # Dump the database structure to a SQL file
rake db:test:clone                      # Recreate the test database from the current environment's database schema
rake db:test:clone_structure            # Recreate the test databases from the development structure
rake db:test:load                       # Recreate the test database from the current schema.rb
rake db:test:prepare                    # Check for pending migrations and load the test schema
rake db:test:purge                      # Empty the test database
rake db:version                         # Retrieves the current schema version number
rake doc:app                            # Build the app HTML Files
rake doc:clobber_app                    # Remove rdoc products
rake doc:clobber_plugins                # Remove plugin documentation
rake doc:clobber_rails                  # Remove rdoc products
rake doc:plugins                        # Generate documentation for all installed plugins
rake doc:rails                          # Build the rails HTML Files
rake doc:reapp                          # Force a rebuild of the RDOC files
rake doc:rerails                        # Force a rebuild of the RDOC files
rake fckeditor:download                 # Update the FCKEditor code to the latest nightly build
rake fckeditor:install                  # Install the FCKEditor components
rake feed:undup                         # Remove duplicate feed items
rake find_mass_assignment               # Find potential mass assignment vulnerabilities
rake gems                               # List the gems that this rails application depends on
rake gems:build                         # Build any native extensions for unpacked gems
rake gems:freeze                        # Freeze a RubyGem into this Rails application; init.rb will be loaded on startup.
rake gems:install                       # Installs all required gems for this application.
rake gems:link                          # Link a RubyGem into this Rails application; init.rb will be loaded on startup.
rake gems:unfreeze                      # Unfreeze/unlink a RubyGem from this Rails application
rake gems:unpack                        # Unpacks the specified gem into vendor/gems.
rake gems:unpack:dependencies           # Unpacks the specified gems and its dependencies into vendor/gems
rake install                            # Install Insoshi
rake jrails:install:javascripts         # Installs the jQuery and jRails javascripts to public/javascripts
rake jrails:update:javascripts          # Copies the jQuery and jRails javascripts to public/javascripts
rake log:clear                          # Truncates all *.log files in log/ to zero bytes
rake notes                              # Enumerate all annotations
rake notes:fixme                        # Enumerate all FIXME annotations
rake notes:optimize                     # Enumerate all OPTIMIZE annotations
rake notes:todo                         # Enumerate all TODO annotations
rake open_id_authentication:db:clear    # Clear the authentication tables
rake open_id_authentication:db:create   # Creates authentication tables for use with OpenIdAuthentication
rake open_id_authentication:db:upgrade  # Upgrade authentication tables from ruby-openid 1.x.x to 2.x.x
rake rails:freeze:edge                  # Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0
rake rails:freeze:gems                  # Lock this application to the current gems (by unpacking them into vendor/rails)
rake rails:unfreeze                     # Unlock this application from freeze of gems or edge and return to a fluid use of system gems
rake rails:update                       # Update both configs, scripts and public/javascripts from Rails
rake rails:update:configs               # Update config/boot.rb from your current rails install
rake rails:update:javascripts           # Update your javascripts from your current rails install
rake rails:update:scripts               # Add new scripts to the application script/ directory
rake routes                             # Print out all defined routes in match order, with names.
rake secret                             # Generate a crytographically secure secret key.
rake spec                               # Run all specs in spec directory (excluding plugin specs)
rake spec:clobber_rcov                  # Remove rcov products for rcov
rake spec:controllers                   # Run the specs under spec/controllers
rake spec:db:fixtures:load              # Load fixtures (from spec/fixtures) into the current environment's database.
rake spec:doc                           # Print Specdoc for all specs (excluding plugin specs)
rake spec:helpers                       # Run the specs under spec/helpers
rake spec:lib                           # Run the specs under spec/lib
rake spec:models                        # Run the specs under spec/models
rake spec:plugin_doc                    # Print Specdoc for all plugin specs
rake spec:plugins                       # Run the specs under vendor/plugins (except RSpec's own)
rake spec:plugins:rspec_on_rails        # Runs the examples for rspec_on_rails
rake spec:rcov                          # Run all specs in spec directory with RCov (excluding plugin specs)
rake spec:server:restart                # reload spec_server.
rake spec:server:start                  # start spec_server.
rake spec:server:stop                   # stop spec_server.
rake spec:translate                     # Translate/upgrade specs using the built-in translator
rake spec:views                         # Run the specs under spec/views
rake stats                              # Report code statistics (KLOCs, etc) from the application
rake test                               # Run all unit, functional and integration tests
rake test:functionals                   # Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional
rake test:integration                   # Run tests for integrationdb:test:prepare / Run the integration tests in test/integration
rake test:plugins                       # Run tests for pluginsenvironment / Run the plugin tests in vendor/plugins/*/**/test (or specify with PLUGIN=name)
rake test:recent                        # Run tests for recentdb:test:prepare / Test recent changes
rake test:uncommitted                   # Run tests for uncommitteddb:test:prepare / Test changes since last checkin (only Subversion)
rake test:units                         # Run tests for unitsdb:test:prepare / Run the unit tests in test/unit
rake time:zones:all                     # Displays names of all time zones recognized by the Rails TimeZone class, grouped by offset.
rake time:zones:local                   # Displays names of time zones recognized by the Rails TimeZone class with the same offset as the system local time
rake time:zones:us                      # Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset.
rake tmp:cache:clear                    # Clears all files and directories in tmp/cache
rake tmp:clear                          # Clear session, cache, and socket files from tmp/
rake tmp:create                         # Creates tmp directories for sessions, cache, and sockets
rake tmp:pids:clear                     # Clears all files in tmp/pids
rake tmp:sessions:clear                 # Clears all files in tmp/sessions
rake tmp:sockets:clear                  # Clears all files in tmp/sockets
rake ultrasphinx:bootstrap              # Bootstrap a full Sphinx environment
rake ultrasphinx:configure              # Rebuild the configuration file for this particular environment.
rake ultrasphinx:daemon:restart         # Restart the search daemon
rake ultrasphinx:daemon:start           # Start the search daemon
rake ultrasphinx:daemon:status          # Check if the search daemon is running
rake ultrasphinx:daemon:stop            # Stop the search daemon
rake ultrasphinx:index                  # Reindex and rotate all indexes.
rake ultrasphinx:index:delta            # Reindex and rotate the delta index.
rake ultrasphinx:index:main             # Reindex and rotate the main index.
rake ultrasphinx:index:merge            # Merge the delta index into the main index.
rake ultrasphinx:spelling:build         # Rebuild the custom spelling dictionary.
